version: '3.8'

services:
  
  postgres:
    image: postgres:15
    restart: always
    env_file: 
      - ./db.env
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 10
  
  article-service:
    build:
      context: .
      dockerfile: HappyHeadlines.ArticleService/Dockerfile
    deploy:
      replicas: 2
    env_file:
      - ./HappyHeadlines.ArticleService/.env
    depends_on:
       postgres:
          condition: service_healthy
                
  draft-service:
    build:
      context: .
      dockerfile: HappyHeadlines.DraftService/Dockerfile
    deploy:
      replicas: 2 # amount of instances
    env_file:
        - ./HappyHeadlines.DraftService/.env
    depends_on:
        postgres:
          condition: service_healthy
          
          
  comment-service:
    build:
      context: .
      dockerfile: HappyHeadlines.CommentService/Dockerfile
    deploy:
      replicas: 2
    env_file:
        - ./HappyHeadlines.CommentService/.env
    depends_on:
        postgres:
          condition: service_healthy
          
  profanity-service:
    build:
      context: .
      dockerfile: HappyHeadlines.ProfanityService/Dockerfile
    deploy:
      replicas: 1
    depends_on:
        postgres:
          condition: service_healthy
    volumes:
      - profanity-data:/app/data
  
  publisher-service:
    build:
      context: .
      dockerfile: HappyHeadlines.PublisherService/Dockerfile
    deploy:
      replicas: 1
    env_file:
        - ./HappyHeadlines.PublisherService/.env
    depends_on:
      - message-broker
      
  message-broker:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - happy-headlines-data:/var/lib/rabbitmq
        
  load-balancer:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - article-service
      - draft-service
      - comment-service
      - profanity-service
  
  seq:
    image: datalust/seq:latest
    ports:
      - "5341:80"
    volumes:
      - happy-headlines-data:/data
    environment:
      - ACCEPT_EULA=Y
      - SEQ_FIRSTRUN_NOAUTHENTICATION=true
        
volumes:
  postgres-data:
  happy-headlines-data:
  profanity-data: