@page "/articles"
@using HappyHeadlines.WebApp.Client.Services
@inject ArticleApi ArticlesApi
@inject NavigationManager Nav

<h3>Latest articles</h3>

@if (_loading)
{
    <p>Loading…</p>
}
else if (_items.Count == 0)
{
    <p>No articles yet.</p>
}
else
{
    <div class="list-group">
        @foreach (var a in _items)
        {
            <a class="list-group-item list-group-item-action" href="@ArticleLink(a)">
                <div class="d-flex w-100 justify-content-between">
                    <h5 class="mb-1">@a.Title</h5>
                    <small>@a.PublishedAt.ToLocalTime().ToString("dd.MM.yyyy HH:mm")</small>
                </div>
                <p class="mb-1 text-truncate">@a.Content</p>
                <small>By @a.Author • @a.Continent</small>
            </a>
        }
    </div>

    <div class="mt-3 d-flex gap-2">
        <button class="btn btn-outline-secondary" disabled="@(_page<=1)" @onclick="Prev">Prev</button>
        <span>Page @_page</span>
        <button class="btn btn-outline-secondary" @onclick="Next">Next</button>
    </div>
}

@code {
    List<HappyHeadlines.WebApp.Client.Models.Article> _items = new();
    int _page = 1;
    string _continent = "Global";
    bool _loading;

    protected override async Task OnInitializedAsync() => await Load();

    async Task Load()
    {
        _loading = true;
        _items = await ArticlesApi.GetPageAsync(_page, _continent);
        _loading = false;
    }

    Task Prev() { _page = Math.Max(1, _page - 1); return Load(); }
    Task Next() { _page++; return Load(); }

    string ArticleLink(HappyHeadlines.WebApp.Client.Models.Article a)
        => $"/articles/{a.Id}?continent={Uri.EscapeDataString(a.Continent.ToString() ?? "Global")}";
}
